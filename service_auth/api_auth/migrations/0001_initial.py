# Generated by Django 5.2.5 on 2025-09-01 05:33

import django.db.models.deletion
import uuid
from django.db import migrations, models


def create_schemas(apps, schema_editor):
    # PostgresSQL:
    if schema_editor.connection.vendor == "postgresql":
        schema_editor.execute("CREATE SCHEMA IF NOT EXISTS users;")


def delete_schemas(apps, schema_editor):
    # PostgresSQL:
    if schema_editor.connection.vendor == "postgresql":
        schema_editor.execute("DROP SCHEMA IF EXISTS users CASCADE;")


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.RunPython(create_schemas, delete_schemas),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Время создания сущности')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Время обновления сущности')),
                ('deleted_at', models.DateTimeField(default=None, help_text='Время удаления сущности (мягкое удаление)', null=True)),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
                'db_table': 'users"."role',
                'constraints': [models.UniqueConstraint(condition=models.Q(('deleted_at__isnull', True)), fields=('name',), name='role_name_unique', violation_error_message='Роль с таким наименованием создана')],
            },
        ),
        migrations.CreateModel(
            name='PermissionByRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Время создания сущности')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Время обновления сущности')),
                ('deleted_at', models.DateTimeField(default=None, help_text='Время удаления сущности (мягкое удаление)', null=True)),
                ('uri', models.CharField(help_text='URI ресурса', max_length=256)),
                ('comment', models.CharField(help_text='Комментарий к выделению права для роли (может использоваться для объяснения причины и т.д.)', max_length=256, null=True)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_auth.role')),
            ],
            options={
                'verbose_name': 'Право доступа по роли',
                'verbose_name_plural': 'Права доступа по ролям',
                'db_table': 'users"."permission_by_role',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Время создания сущности')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Время обновления сущности')),
                ('deleted_at', models.DateTimeField(default=None, help_text='Время удаления сущности (мягкое удаление)', null=True)),
                ('first_name', models.CharField(help_text='Имя', max_length=64)),
                ('second_name', models.CharField(help_text='Отчество (при наличии)', max_length=64, null=True)),
                ('last_name', models.CharField(help_text='Фамилия', max_length=64)),
                ('email_enc', models.CharField(help_text='Email (в зашифрованном виде)', max_length=512)),
                ('email_hash', models.CharField(help_text='Email (хеш)', max_length=128)),
                ('password_hash', models.CharField(help_text='Пароль (хеш)', max_length=128)),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'users"."user',
                'constraints': [models.UniqueConstraint(condition=models.Q(('deleted_at__isnull', True)), fields=('email_hash',), name='unique_email_hash', violation_error_message='Пользователь с указанным email уже создан')],
            },
        ),
        migrations.CreateModel(
            name='UserPermissionByRoleAssociation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Время создания сущности')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Время обновления сущности')),
                ('deleted_at', models.DateTimeField(default=None, help_text='Время удаления сущности (мягкое удаление)', null=True)),
                ('permission_by_role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_auth.permissionbyrole')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_auth.user')),
            ],
            options={
                'db_table': 'users"."user_permission_by_role_association',
            },
        ),
        migrations.AddConstraint(
            model_name='permissionbyrole',
            constraint=models.UniqueConstraint(condition=models.Q(('deleted_at__isnull', True)), fields=('uri', 'role'), name='role_permission_unique', violation_error_message='У роли уже имеется доступ к ресурсу'),
        ),
        migrations.AddConstraint(
            model_name='userpermissionbyroleassociation',
            constraint=models.UniqueConstraint(condition=models.Q(('deleted_at__isnull', True)), fields=('user', 'permission_by_role'), name='unique_user_role_permission', violation_error_message='Пользователю уже выданы указанные права'),
        ),
    ]
