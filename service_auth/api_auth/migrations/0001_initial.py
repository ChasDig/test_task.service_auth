# Generated by Django 5.2.5 on 2025-09-04 08:46

import django.db.models.deletion
import uuid
from django.db import migrations, models


def create_schemas(apps, schema_editor):
    # PostgresSQL:
    if schema_editor.connection.vendor == "postgresql":
        schema_editor.execute("CREATE SCHEMA IF NOT EXISTS users;")


def delete_schemas(apps, schema_editor):
    # PostgresSQL:
    if schema_editor.connection.vendor == "postgresql":
        schema_editor.execute("DROP SCHEMA IF EXISTS users CASCADE;")


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.RunPython(create_schemas, delete_schemas),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Время создания сущности')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Время обновления сущности')),
                ('deleted_at', models.DateTimeField(default=None, help_text='Время удаления сущности (мягкое удаление)', null=True)),
                ('title', models.CharField(help_text='Наименование группы (ru)', max_length=128)),
                ('alias', models.CharField(help_text='Alias группы (en)', max_length=128)),
            ],
            options={
                'verbose_name': 'Группа',
                'verbose_name_plural': 'Группы',
                'db_table': 'users"."group',
                'constraints': [models.UniqueConstraint(condition=models.Q(('deleted_at__isnull', True)), fields=('title',), name='group_title_unique', violation_error_message='Группа с таким наименованием создана'), models.UniqueConstraint(condition=models.Q(('deleted_at__isnull', True)), fields=('alias',), name='group_alias_unique', violation_error_message='Группа с таким alias создана')],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Время создания сущности')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Время обновления сущности')),
                ('deleted_at', models.DateTimeField(default=None, help_text='Время удаления сущности (мягкое удаление)', null=True)),
                ('uri', models.CharField(help_text='URI ресурса', max_length=256)),
                ('name', models.CharField(help_text='Наименование ресурса', max_length=256)),
                ('comment', models.CharField(max_length=256, null=True)),
            ],
            options={
                'verbose_name': 'Ресурс',
                'verbose_name_plural': 'Ресурсы',
                'db_table': 'users"."resource',
                'constraints': [models.UniqueConstraint(condition=models.Q(('deleted_at__isnull', True)), fields=('uri', 'name'), name='resource_unique', violation_error_message='Указанный ресурс имеется')],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Время создания сущности')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Время обновления сущности')),
                ('deleted_at', models.DateTimeField(default=None, help_text='Время удаления сущности (мягкое удаление)', null=True)),
                ('first_name', models.CharField(help_text='Имя', max_length=64)),
                ('second_name', models.CharField(help_text='Отчество (при наличии)', max_length=64, null=True)),
                ('last_name', models.CharField(help_text='Фамилия', max_length=64)),
                ('email_enc', models.CharField(help_text='Email (в зашифрованном виде)', max_length=512)),
                ('email_hash', models.CharField(help_text='Email (хеш)', max_length=128)),
                ('password_hash', models.CharField(help_text='Пароль (хеш)', max_length=128)),
                ('role', models.CharField(choices=[('superuser', 'Superuser'), ('admin', 'Admin'), ('user', 'User')], default='user', help_text='Роль', max_length=32)),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'users"."user',
                'constraints': [models.UniqueConstraint(condition=models.Q(('deleted_at__isnull', True)), fields=('email_hash',), name='unique_email_hash', violation_error_message='Пользователь с указанным email уже создан')],
            },
        ),
        migrations.CreateModel(
            name='PermissionByGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Время создания сущности')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Время обновления сущности')),
                ('deleted_at', models.DateTimeField(default=None, help_text='Время удаления сущности (мягкое удаление)', null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_permission', to='api_auth.group')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_permission', to='api_auth.resource')),
            ],
            options={
                'verbose_name': 'Право доступа по группе',
                'verbose_name_plural': 'Права доступа по группам',
                'db_table': 'users"."permission_by_group',
                'constraints': [models.UniqueConstraint(condition=models.Q(('deleted_at__isnull', True)), fields=('resource', 'group'), name='group_resource_permission_unique', violation_error_message='У группы имеется доступ к ресурсу')],
            },
        ),
        migrations.CreateModel(
            name='UserByGroupAssociation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Время создания сущности')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Время обновления сущности')),
                ('deleted_at', models.DateTimeField(default=None, help_text='Время удаления сущности (мягкое удаление)', null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_by_group', to='api_auth.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_by_group', to='api_auth.user')),
            ],
            options={
                'db_table': 'users"."user_by_group_association',
                'constraints': [models.UniqueConstraint(condition=models.Q(('deleted_at__isnull', True)), fields=('user', 'group'), name='unique_user_group_permission', violation_error_message='Пользователь уже добавлен в указанную группу')],
            },
        ),
    ]
